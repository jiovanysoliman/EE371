module modified_top_level (CLOCK_50, SW, KEY, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5);
	input  logic CLOCK_50;	// 50MHz clock
	input  logic [9:0] SW;
	input  logic [3:0] KEY;
	output logic [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;	// active low
	logic [4:0] Address;
	logic [2:0] DataIn;
	logic Write;	
	logic reset;
	logic select;
	logic [2:0] DataOut1;
	logic [2:0] DataOut2;
	logic [2:0] dataDisplay;
	logic [4:0] address1, address2; //switch, addr value, select, real addr
	logic wren1, wren2; //wren1 = task2, wren2 = task3
	logic [4:0] readAddr; // for ram32x3port2
	logic clkSelect;
	logic [31:0] clk;
	
	parameter whichclk = 25;
	
	assign clkSelect = clk[whichclk];
	assign select = SW[9]; // 0 = task2, 1 = task3


	assign DataIn = SW[3:1];
	// Display data in
	seg7 dataInDisplay (.hex(SW[3:1]), .leds(HEX1));
	
	assign Address = SW[8:4];
	// Display the write address for task 1
	seg7 addrDisplay1 (.hex(SW[8]), .leds(HEX5));
	seg7 addrDisplay2 (.hex(SW[7:4]), .leds(HEX4));

	assign Write = SW[0];
	assign reset = ~KEY[3];
	
	always_comb
		case(select)
			1'b0: 
				begin
					address1 = Address;
					address2 = Address;
					wren1 = Write;
					wren2 = 0;
					dataDisplay = DataOut1;
				end
			1'b1: 
				begin
					address1 = Address;
					address2 = Address;
					wren1 = 0;
					wren2 = Write;
					dataDisplay = DataOut2;
				end
				
			default: 
				begin
					address1 = Address;
					address2 = Address;
					wren1 = 0;
					wren2 = 0;
					dataDisplay = DataOut2;
				end
		endcase
	
	
	clock_divider cdiv (.clock(CLOCK_50), .divided_clocks(clk));
	
 	counter c (.reset(reset), .clk(clkSelect), .addr(readAddr));
 	
 	logic [4:0] readAddrbuff;
 	
 	D_FF d1(.q(readAddrbuff[4]), .d(readAddr[4]), .reset(reset), .clk(clkSelect));
 	D_FF d2(.q(readAddrbuff[3]), .d(readAddr[3]), .reset(reset), .clk(clkSelect));
 	D_FF d3(.q(readAddrbuff[2]), .d(readAddr[2]), .reset(reset), .clk(clkSelect));
 	D_FF d4(.q(readAddrbuff[1]), .d(readAddr[1]), .reset(reset), .clk(clkSelect));
 	D_FF d5(.q(readAddrbuff[0]), .d(readAddr[0]), .reset(reset), .clk(clkSelect));
    
 	task2 t2 (.address(address1), .clock(clkSelect), .data(DataIn), .wren(wren1), .q(DataOut1));
 	ram32x3port2 r (.clock(clkSelect), .data(DataIn), .rdaddress(readAddr), .wraddress(address2), .wren(wren2), .q(DataOut2));
	
		// Display the read address for task 2
	seg7 addrDisplay3 (.hex(readAddrbuff[4]), .leds(HEX3));
	seg7 addrDisplay4 (.hex(readAddrbuff[3:0]), .leds(HEX2));


	// Display data out
	seg7 dataOutDisplay (.hex(dataDisplay), .leds(HEX0));
	
endmodule

module D_FF (q, d, reset, clk);
    input  logic d, clk, reset;
    output logic q;
    
    always_ff @(posedge clk) begin 
        if(reset)
            q <= 0;
        else
            q <= d;
    end
endmodule

module modified_top_level_tb ();

	logic CLOCK_50;	// 50MHz clock
	logic [9:0] SW;
	logic [3:0] KEY;
	logic [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5;	// active low
	
	parameter CLOCK_PERIOD = 10;
	initial begin
	CLOCK_50 <= 0;
	forever #(CLOCK_PERIOD/2) CLOCK_50 <= ~CLOCK_50; // forever toggle the clock
	end
	
	modified_top_level dut (.*);
	
	initial begin
		SW[9] <= 1; @(posedge CLOCK_50);
		SW[9] <= 0; repeat (50) @(posedge CLOCK_50);
		SW[0] <= 0; repeat (50) @(posedge CLOCK_50);
		
		$stop;
	end

endmodule